{"ast":null,"code":"import _objectSpread from \"/home/nineleaps/FrontEnd-One-on-One/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/nineleaps/FrontEnd-One-on-One/src/Pages/Feedback.js\";\n// import axios from \"axios\";\n// import React from 'react';\n// import { Redirect } from \"react-router-dom\";\n// import { Button, Form, Icon, Label, TextArea, TabPane,Divider } from 'semantic-ui-react';\n// import Footer from \"../Components/Footer\";\n// import Header from \"../Components/Header\";\n// import apiconstants from '../employee/config';\n// import \"../Managerpg1/Managermain.css\";\n// import Tab from \"../Components/Tab\"\n// var bgColors = {\n//     \"Green\": \"#c4ffbb\",\n//     \"Yellow\": \"#d3d3d3\",\n// };\n// export default class Test extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             // question: ' How is everything going today? Tell me about this last week?',\n//             // answer: '',\n//             // question: ' What has gone well/not so well for you in this month?',\n//             // answer: '',\n//             // question: ' What challenges have you faced?',\n//             // answer: '',\n//             // question: ' How are you/your team progressing towards established goals?',\n//             // answer: '',\n//             // question: ' What are you committing to between now and the next time we meet?',\n//             // answer: '',\n//             disabled: false,\n//             dynamic: [],\n//             disabled: false,\n//             nullValue: false,\n//             locationPath:\"\"\n//         }\n//     }\n//     componentWillMount() {\n//       this.setState({locationPath:this.props.history.location.pathname})\n//         var id = this.props.match.params.id\n//         var month = this.props.match.params.month\n//         var year = \"2019\"\n//         console.log(id)\n//         const response = axios({\n//             method: 'post',\n//             // url: 'http://192.168.1.245:8095/updatemonthvalue',\n//             url: apiconstants.URL + `updatemonthvalue/${id}/${month}/${year}`,\n//             data: this.state\n//         })\n//             .then(response => {\n//                 console.log(JSON.stringify(response.data + \"  first\"))\n//                 if (response.data.length != 0) {\n//                     console.log(JSON.stringify(response.data.answer))\n//                     this.setState({ a1: response.data[0].answer });\n//                     // this.setState({ a2: response.data[1].answer });\n//                     // this.setState({ a3: response.data[2].answer });\n//                     // this.setState({ a4: response.data[3].answer });\n//                     // this.setState({ a5: response.data[4].answer });\n//                 }\n//                 else {\n//                     console.log(\"second\", response)\n//                     this.setState({ a1: '' });\n//                     this.setState({ a2: '' });\n//                     this.setState({ a3: '' });\n//                     this.setState({ a4: '' });\n//                     this.setState({ a5: '' });\n//                 }\n//             if (response.data.length != 0) {\n//                 const da = [];\n//                 console.log(JSON.stringify(response.data))\n//                 response.data.map((datas) => {\n//                   if (datas.type === 'd') {\n//                     da.push(datas);\n//                   }\n//                 })\n//                 this.setState({ dynamic: da })\n//               }\n//               else {\n//                 this.setState({ dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month }) });\n//               }\n//             })\n//     }\n//     // handelAnswerchange1 = (event) => {\n//     //     this.setState({\n//     //         a1: event.target.value\n//     //     })\n//     // };\n//     // handelAnswerchange2 = (event) => {\n//     //     this.setState({\n//     //         a2: event.target.value\n//     //     })\n//     // };\n//     // handelAnswerchange3 = (event) => {\n//     //     this.setState({\n//     //         a3: event.target.value\n//     //     })\n//     // };\n//     // handelAnswerchange4 = (event) => {\n//     //     this.setState({\n//     //         a4: event.target.value\n//     //     })\n//     // };\n//     // handelAnswerchange5 = (event) => {\n//     //     this.setState({\n//     //         a5: event.target.value\n//     //     })\n//     // };\n//     handleQuesChange = i => evt => {\n//         const newques = this.state.dynamic.map((row, j) => {\n//           if (i !== j) return row;\n//           console.log('row', row)\n//           return { ...row, question: evt.target.value };\n//         });\n//         this.setState({ dynamic: newques });\n//       };\n//       handleAnsChange = i => evt => {\n//         const newanswer = this.state.dynamic.map((row, j) => {\n//           if (i !== j) return row;\n//           return { ...row, answer: evt.target.value };\n//         });\n//         this.setState({ dynamic: newanswer });\n//       };\n//       handleRemarkChange = i => evt => {\n//         const newr = this.state.dynamic.map((row, j) => {\n//           if (i !== j) return row;\n//           return { ...row, remark: evt.target.value };\n//         });\n//         this.setState({ dynamic: newr });\n//       };\n//          handleAdd = () => {\n//             this.setState({\n//               dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month })\n//             });\n//           };\n//     handleSubmit = (event) => {\n//         event.preventDefault();\n//         console.log(this.state)\n//         let id = this.props.match.params.id\n//         let month = this.props.match.params.month\n// let year=\"2019\"\n//         if (this.validate() == true) {\n//             const response = axios({\n//                 method: 'PATCH',\n//                 // url:'http://192.168.1.245:8095/qanda_static',\n//                 url: apiconstants.URL + `feedback/${id}/${month}/${year}`,\n//                 data: this.state\n//             });\n//             // this.setState({\n//             //     redirect: true\n//             // })\n//         }\n//         for(let i=0;i<this.state.dynamic.length;i++){\n//             if((this.state.dynamic[i].question=='' && this.state.dynamic[i].answer=='' && this.state.dynamic[i].remark==''))\n//             {\n//                this.setState({nullValue:false})\n//               this.setState({\n//                   redirect: true\n//                 })\n//             }\n//             else if((this.state.dynamic[i].question==''|| this.state.dynamic[i].answer==''  ))\n//             {\n//              this.setState({nullValue:true})\n//               break;\n//             }\n//           if(this.state.nullValue==true){\n//             alert(\"Fields can't be empty\")\n//           }\n//           else{\n//             let id = this.props.match.params.id\n//           let month = this.props.match.params.month\n//           let year =\"2019\"\n//           console.log(this.state.dynamic, 'state');\n//           fetch(apiconstants.URL + `feedback/${id}/${month}/${year}`, {\n//             method: 'PATCH',\n//             headers: {\n//               'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify(this.state.dynamic)\n//           }).then(res=> res)\n//           .then(res => {\n//             console.log(res.status)\n//             })\n//             // this.setState({\n//             //   redirect: true\n//             // })\n//             //    if (this.state.redirect) {\n//             //     return <Redirect to={\"/goals\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month) + \"/\" + (this.props.match.params.emp) + \"/\" + (this.props.match.params.pro)} />;\n//             //   }\n//           }\n//         };\n//     };\n//     async componentDidMount() {\n//         console.log(\"Component Did mount started\")\n//         let val=await this.time();\n//         console.log(\"value is \"+val)\n//         if(val===1){\n//             console.log(\"it entered the if \"+val)\n//             await setTimeout(()=>{this.setState({disabled:true})},);\n//         }\n//     }\n//     time = async () => {\n//         console.log(\"state is:\"+JSON.stringify(this.state));\n//         var id = this.props.match.params.id\n//         var month = this.props.match.params.month\n//         const response =await axios({\n//             method: 'get',\n//             url: apiconstants.URL + `/employeetimestamp/${id}/${month}`,\n//             // data: this.state\n//         })\n//             console.log(month)\n//             return await response.data.time;\n//     }\n//     setRedirect1 = (event) => {\n//         event.preventDefault();\n//        console.log(this.state)\n//         this.setState({\n//             redirect1: true\n//         })\n//     };\n//     validate() {\n//         const { q1 } = this.state;\n//         const { a1 } = this.state;\n//         const { q2 } = this.state;\n//         const { a2 } = this.state;\n//         const { q3 } = this.state;\n//         const { a3 } = this.state;\n//         const { q4 } = this.state;\n//         const { a4 } = this.state;\n//         const { q5 } = this.state;\n//         const { a5 } = this.state;\n//         let formIsValid = true;\n//         if (q1 == '' || a1 == '' || q2 == '' || a2 == '' || q3 == '' || a3 == '' || q4 == '' || a4 == '' || q5 == '' || a5 == '') {\n//             alert('Please fill the field');\n//             formIsValid = false;\n//         }\n//         else\n//             return formIsValid;\n//     }\n//     render() {\n//         // const {q1}=' How is everything going today? Tell me about this last week?',\n//         // var {q2}=' What has gone well/not so well for you in this month?',\n//         // var {q3}=' What challenges have you faced?',\n//         // var {q4}=' How are you/your team progressing towards established goals?',\n//         // var {q5}= ' What are you committing to between now and the next time we meet?',\n//         const pathURL=this.state.locationPath;\n//         {\n//             var id = this.props.match.params.id\n//             var month = this.props.match.params.month\n//             if (this.state.redirect) {\n//                 return <Redirect to={\"/dynamic-form\"+\"/\"+  (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month)+\"/\"+(this.props.match.params.emp) +\"/\"+(this.props.match.params.pro)} />;\n//             }\n//         }\n//         {\n//             var id = this.props.match.params.id\n//             var month = this.props.match.params.month\n//             if (this.state.redirect1) {\n//                 return <Redirect to={\"/month\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) +\n//                  \"/\" + (this.props.match.params.emp)+\"/\"+ (this.props.match.params.pro)} />;\n//             }\n//         }\n//         var mid = this.props.match.params.mid;\n//         return (\n//             <div className=\"manbg\">\n//                 <Header mid={mid} />\n//                <Tab mid={this.props.match.params.mid}  \n//                     id={this.props.match.params.id}  \n//                     month={this.props.match.params.month}  \n//                     emp={this.props.match.params.emp} \n//                     pro={this.props.match.params.pro}  \n//                     pathURL={pathURL}\n//                      />\n//                 <Label size='large' style={{color:\"black\",width :\"auto\"}} ><Icon name='user' />\n//        {this.props.match.params.pro}\n//        </Label> \n//                <h1 style={{color:\"#303030\",paddingLeft:\"40px\"}}>Employee Feedback-1 : <span style={{color:\"darkblue\",fontWeight:\"bolder\"}}>{this.props.match.params.emp}</span> </h1>\n//                 <br />\n//                 <br />\n//                 <br />\n//                 <br />\n//                 <br />\n//                 <br />\n//                                {/* <button onClick={this.setRedirect}\n//                     style={{ \"width\": \"200px\",float:\"right\" }}\n//                     className=\"ui positive button\">Save & Next <Icon name=\"arrow circle right\" /> </button> */}\n//                 <Form >      \n//             {this.state.dynamic.map((row, i) => (\n//               <div style={{ paddingLeft: \"10%\" }} className=\"form1\">  \n//                 <TextArea style={{ color: \"black\", height: \"60px\" }}\n//                   placeholder=\"Enter your question\"\n//                   value={row.question}\n//                   disabled={this.state.disabled}\n//                   onChange={this.handleQuesChange(i)}\n//                required >{row.question}</TextArea>\n//                 <br />\n//                 <TextArea style={{ color: \"black\" }}\n//                   placeholder='Enter answer here'\n//                   value={row.answer}\n//                   disabled={this.state.disabled}\n//                   style={{ backgroundColor: bgColors.Yellow }}\n//                   onChange={this.handleAnsChange(i)}\n//                   required >{row.answer}</TextArea>\n//                 <br />\n//                 <TextArea style={{ color: \"black\", height: \"60px\" }}\n//                   placeholder='Remarks. If any?'\n//                   style={{ backgroundColor: bgColors.Green }}\n//                   value={row.remark}\n//                   disabled={this.state.disabled}\n//                   onChange={this.handleRemarkChange(i)}\n//                   required  >{row.remark}</TextArea>\n//               </div>\n//             ))}\n//    <button onClick={this.setRedirect1}\n//                             style={{ width :\"auto\",}}\n//                             className=\"ui blue button\"> <Icon name=\"arrow circle left\" />Go Back</button>\n//             <Button\n//               type=\"button\"\n//               onClick={this.handleAdd}\n//               className=\"ui blue button\"\n//               style={{ width: \"auto\" }} > Add more questions </Button>\n//             <Button onClick={this.handleSubmit} style={{ width: \"auto\" }} className=\"ui green button\" >   Save <Icon name=\"arrow circle right\" /></Button>\n//           </Form> \n//           <Footer/>\n//         </div>\n//         )\n//     }\n// }\nimport axios from \"axios\";\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Form, Icon, Label, TextArea, TabPane, Divider } from 'semantic-ui-react';\nimport Footer from \"../Components/Footer\";\nimport Header from \"../Components/Header\";\nimport MonthYearPicker from 'react-month-year-picker';\nimport apiconstants from '../employee/config';\nimport \"../Managerpg1/Managermain.css\";\nimport Tab from \"../Components/Tab\";\nimport Year from \"../Components/YearMonthPicker\"; // import Year from \"../Components/YearPick\"\n\nimport Month from \"../Components/MonthYear/Month\";\nvar bgColors = {\n  \"Default\": \"#81b71a\",\n  \"Blue\": \"#00B1E1\",\n  \"Cyan\": \"#\",\n  \"Green\": \"#98FB98\",\n  \"Red\": \"#E9573F\",\n  \"Yellow\": \"#d3d3d3\"\n};\n\nclass Managerpage3 extends React.Component {\n  constructor() {\n    super();\n\n    this.time = async () => {\n      console.log(\"state is:\" + JSON.stringify(this.state));\n      var id = this.props.match.params.id;\n      var month = this.props.match.params.month;\n      const response = await axios({\n        method: 'get',\n        url: apiconstants.URL + \"/employeetimestamp/\".concat(id, \"/\").concat(month)\n      });\n      console.log(response.data.time);\n      return await response.data.time;\n    };\n\n    this.handleQuesChange = i => evt => {\n      const newques = this.state.dynamic.map((row, j) => {\n        if (i !== j) return row;\n        console.log('row', row);\n        return _objectSpread({}, row, {\n          question: evt.target.value\n        });\n      });\n      this.setState({\n        dynamic: newques\n      });\n    };\n\n    this.handleAnsChange = i => evt => {\n      const newanswer = this.state.dynamic.map((row, j) => {\n        if (i !== j) return row;\n        return _objectSpread({}, row, {\n          answer: evt.target.value\n        });\n      });\n      this.setState({\n        dynamic: newanswer\n      });\n    };\n\n    this.handleRemarkChange = i => evt => {\n      const newr = this.state.dynamic.map((row, j) => {\n        if (i !== j) return row;\n        return _objectSpread({}, row, {\n          remark: evt.target.value\n        });\n      });\n      this.setState({\n        dynamic: newr\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault(); // this.setState({\n      //   redirect: true\n      // })\n\n      console.log(JSON.stringify(this.state.dynamic));\n\n      for (let i = 0; i < this.state.dynamic.length; i++) {\n        if (this.state.dynamic[i].question == '' && this.state.dynamic[i].answer == '' && this.state.dynamic[i].remark == '') {\n          await this.setState({\n            nullValue: false\n          }); // this.setState({\n          //     redirect: true\n          //   })\n        } else if (this.state.dynamic[i].question == '' || this.state.dynamic[i].answer == '') {\n          await this.setState({\n            nullValue: true\n          });\n          break;\n        }\n\n        if (this.state.nullValue == true) {\n          alert(\"Fields can't be empty\");\n        } else {\n          let id = this.props.match.params.id;\n          let month = this.props.match.params.month;\n          console.log(this.state.dynamic, 'state');\n          fetch(apiconstants.URL + \"qanda_dynamic/\".concat(id, \"/\").concat(month), {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.dynamic)\n          }).then(res => res).then(res => {\n            console.log(res.status);\n          });\n          this.setState({\n            redirect: true\n          }); //  if (this.state.redirect) {\n          //   return <Redirect to={\"/goals\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month) + \"/\" + (this.props.match.params.emp) + \"/\" + (this.props.match.params.pro)} />;\n          // }\n        }\n      }\n\n      ;\n    };\n\n    this.handleAdd = () => {\n      this.setState({\n        dynamic: this.state.dynamic.concat({\n          id: this.props.match.params.id,\n          question: \"\",\n          answer: \"\",\n          remark: \"\",\n          month: this.props.match.params.month\n        })\n      });\n    };\n\n    this.setRedirect1 = event => {\n      event.preventDefault();\n      console.log(this.state);\n      this.setState({\n        redirect1: true\n      });\n    };\n\n    this.state = {\n      dynamic: [],\n      disabled: false,\n      nullValue: false\n    };\n  }\n\n  componentWillMount() {\n    let id = this.props.match.params.id;\n    let month = this.props.match.params.month;\n    let year = \"2019 \";\n    const response = axios({\n      method: 'post',\n      url: apiconstants.URL + \"prepopulate/\".concat(id, \"/\", 5, \"/\", 2019)\n    }).then(response => {\n      console.log(response);\n      this.setState({\n        dynamic: this.state.dynamic.concat({\n          id: this.props.match.params.id,\n          question: \"\",\n          answer: \"\",\n          remark: \"\",\n          month: this.props.match.params.month\n        })\n      }); // if (response.data.length != 0) {\n      //   const da = [];\n      //   console.log(JSON.stringify(response.data))\n      //   response.data.map((datas) => {\n      //     if (datas.type === 'd') {\n      //       da.push(datas);\n      //     }\n      //   })\n      //   this.setState({ dynamic: da })\n      // }\n      // else {\n      //   this.setState({ dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month }) });\n      // }\n    });\n  }\n\n  async componentDidMount() {\n    console.log(\"Component Did mount started\");\n    let val = await this.time();\n    console.log(\"value is \" + val);\n\n    if (val === 1) {\n      console.log(\"it entered the if \" + val);\n      await setTimeout(() => {\n        this.setState({\n          disabled: true\n        });\n      });\n    }\n  }\n\n  render() {\n    // {\n    //   if (this.state.redirect) {\n    //     return <Redirect to={\"/goals\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month) + \"/\" + (this.props.match.params.emp) + \"/\" + (this.props.match.params.pro)} />;\n    //   }\n    // }\n    {\n      var id = this.props.match.params.id;\n      var month = this.props.match.params.month;\n\n      if (this.state.redirect1) {\n        return React.createElement(Redirect, {\n          to: \"/manager\" + \"/\" + this.props.match.params.mid,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 616\n          },\n          __self: this\n        });\n      }\n    }\n    var mid = this.props.match.params.mid;\n    return React.createElement(\"div\", {\n      className: \"manbg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, React.createElement(Header, {\n      mid: mid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      mid: this.props.match.params.mid,\n      id: this.props.match.params.id,\n      month: this.props.match.params.month,\n      emp: this.props.match.params.emp,\n      pro: this.props.match.params.pro // pathURL={pathURL}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ui calender\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631\n      },\n      __self: this\n    }), React.createElement(Label, {\n      size: \"large\",\n      style: {\n        color: \"black\",\n        width: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632\n      },\n      __self: this\n    }), this.props.match.params.pro), React.createElement(Year, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      style: {\n        color: \" #303030\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, \"Employee Feedback-2 :\", React.createElement(\"span\", {\n      style: {\n        color: \"darkblue\",\n        fontWeight: \"bolder\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, this.props.match.params.emp), \" \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, this.state.dynamic.map((row, i) => React.createElement(\"div\", {\n      style: {\n        paddingLeft: \"10%\"\n      },\n      className: \"form1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      style: {\n        color: \"black\",\n        height: \"60px\"\n      },\n      placeholder: \"Enter your question\",\n      value: row.question,\n      disabled: this.state.disabled,\n      onChange: this.handleQuesChange(i),\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 649\n      },\n      __self: this\n    }, row.question), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }), React.createElement(TextArea, {\n      style: {\n        color: \"black\"\n      },\n      placeholder: \"Enter answer here\",\n      value: row.answer,\n      disabled: this.state.disabled,\n      style: {\n        backgroundColor: bgColors.Yellow\n      },\n      onChange: this.handleAnsChange(i),\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, row.answer), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }), React.createElement(TextArea, {\n      style: {\n        color: \"black\",\n        height: \"60px\"\n      },\n      placeholder: \"Remarks. If any?\",\n      style: {\n        backgroundColor: bgColors.Green\n      },\n      value: row.remark,\n      disabled: this.state.disabled,\n      onChange: this.handleRemarkChange(i),\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, row.remark))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setRedirect1,\n      style: {\n        width: \"auto\"\n      },\n      className: \"ui blue button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, \" \", React.createElement(Icon, {\n      name: \"arrow circle left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), \"Go Back\"), React.createElement(Button, {\n      type: \"button\",\n      onClick: this.handleAdd,\n      className: \"ui blue button\",\n      style: {\n        width: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \" Add more questions \"), React.createElement(Button, {\n      onClick: this.handleSubmit,\n      style: {\n        width: \"auto\"\n      },\n      className: \"ui green button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"   Save \", React.createElement(Icon, {\n      name: \"arrow circle right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Managerpage3;","map":{"version":3,"sources":["/home/nineleaps/FrontEnd-One-on-One/src/Pages/Feedback.js"],"names":["axios","React","Redirect","Button","Form","Icon","Label","TextArea","TabPane","Divider","Footer","Header","MonthYearPicker","apiconstants","Tab","Year","Month","bgColors","Managerpage3","Component","constructor","time","console","log","JSON","stringify","state","id","props","match","params","month","response","method","url","URL","data","handleQuesChange","i","evt","newques","dynamic","map","row","j","question","target","value","setState","handleAnsChange","newanswer","answer","handleRemarkChange","newr","remark","handleSubmit","e","preventDefault","length","nullValue","alert","fetch","headers","body","then","res","status","redirect","handleAdd","concat","setRedirect1","event","redirect1","disabled","componentWillMount","year","componentDidMount","val","setTimeout","render","mid","emp","pro","color","width","fontWeight","paddingLeft","height","backgroundColor","Yellow","Green"],"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","sourcesContent":["// import axios from \"axios\";\n// import React from 'react';\n// import { Redirect } from \"react-router-dom\";\n// import { Button, Form, Icon, Label, TextArea, TabPane,Divider } from 'semantic-ui-react';\n// import Footer from \"../Components/Footer\";\n// import Header from \"../Components/Header\";\n// import apiconstants from '../employee/config';\n// import \"../Managerpg1/Managermain.css\";\n// import Tab from \"../Components/Tab\"\n\n\n// var bgColors = {\n//     \"Green\": \"#c4ffbb\",\n//     \"Yellow\": \"#d3d3d3\",\n// };\n\n// export default class Test extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n\n//             // question: ' How is everything going today? Tell me about this last week?',\n//             // answer: '',\n//             // question: ' What has gone well/not so well for you in this month?',\n//             // answer: '',\n//             // question: ' What challenges have you faced?',\n//             // answer: '',\n//             // question: ' How are you/your team progressing towards established goals?',\n//             // answer: '',\n//             // question: ' What are you committing to between now and the next time we meet?',\n//             // answer: '',\n//             disabled: false,\n//             dynamic: [],\n//             disabled: false,\n//             nullValue: false,\n//             locationPath:\"\"\n//         }\n//     }\n\n\n//     componentWillMount() {\n//       this.setState({locationPath:this.props.history.location.pathname})\n//         var id = this.props.match.params.id\n//         var month = this.props.match.params.month\n//         var year = \"2019\"\n//         console.log(id)\n//         const response = axios({\n//             method: 'post',\n//             // url: 'http://192.168.1.245:8095/updatemonthvalue',\n//             url: apiconstants.URL + `updatemonthvalue/${id}/${month}/${year}`,\n//             data: this.state\n//         })\n//             .then(response => {\n//                 console.log(JSON.stringify(response.data + \"  first\"))\n//                 if (response.data.length != 0) {\n//                     console.log(JSON.stringify(response.data.answer))\n//                     this.setState({ a1: response.data[0].answer });\n//                     // this.setState({ a2: response.data[1].answer });\n//                     // this.setState({ a3: response.data[2].answer });\n//                     // this.setState({ a4: response.data[3].answer });\n//                     // this.setState({ a5: response.data[4].answer });\n//                 }\n//                 else {\n//                     console.log(\"second\", response)\n//                     this.setState({ a1: '' });\n//                     this.setState({ a2: '' });\n//                     this.setState({ a3: '' });\n//                     this.setState({ a4: '' });\n//                     this.setState({ a5: '' });\n//                 }\n          \n\n//             if (response.data.length != 0) {\n//                 const da = [];\n//                 console.log(JSON.stringify(response.data))\n//                 response.data.map((datas) => {\n//                   if (datas.type === 'd') {\n//                     da.push(datas);\n//                   }\n//                 })\n//                 this.setState({ dynamic: da })\n//               }\n      \n//               else {\n//                 this.setState({ dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month }) });\n      \n//               }\n//             })\n\n//     }\n\n\n//     // handelAnswerchange1 = (event) => {\n\n//     //     this.setState({\n//     //         a1: event.target.value\n\n//     //     })\n//     // };\n\n\n//     // handelAnswerchange2 = (event) => {\n//     //     this.setState({\n//     //         a2: event.target.value\n//     //     })\n//     // };\n\n//     // handelAnswerchange3 = (event) => {\n//     //     this.setState({\n//     //         a3: event.target.value\n//     //     })\n//     // };\n\n//     // handelAnswerchange4 = (event) => {\n//     //     this.setState({\n//     //         a4: event.target.value\n//     //     })\n//     // };\n\n//     // handelAnswerchange5 = (event) => {\n//     //     this.setState({\n//     //         a5: event.target.value\n//     //     })\n//     // };\n\n\n//     handleQuesChange = i => evt => {\n//         const newques = this.state.dynamic.map((row, j) => {\n//           if (i !== j) return row;\n//           console.log('row', row)\n//           return { ...row, question: evt.target.value };\n//         });\n    \n//         this.setState({ dynamic: newques });\n//       };\n//       handleAnsChange = i => evt => {\n//         const newanswer = this.state.dynamic.map((row, j) => {\n//           if (i !== j) return row;\n//           return { ...row, answer: evt.target.value };\n//         });\n    \n//         this.setState({ dynamic: newanswer });\n//       };\n//       handleRemarkChange = i => evt => {\n//         const newr = this.state.dynamic.map((row, j) => {\n//           if (i !== j) return row;\n//           return { ...row, remark: evt.target.value };\n//         });\n    \n//         this.setState({ dynamic: newr });\n//       };\n\n//          handleAdd = () => {\n//             this.setState({\n//               dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month })\n              \n//             });\n//           };\n    \n//     handleSubmit = (event) => {\n//         event.preventDefault();\n//         console.log(this.state)\n//         let id = this.props.match.params.id\n//         let month = this.props.match.params.month\n// let year=\"2019\"\n//         if (this.validate() == true) {\n//             const response = axios({\n//                 method: 'PATCH',\n//                 // url:'http://192.168.1.245:8095/qanda_static',\n//                 url: apiconstants.URL + `feedback/${id}/${month}/${year}`,\n//                 data: this.state\n\n              \n//             });\n//             // this.setState({\n//             //     redirect: true\n//             // })\n//         }\n\n//         for(let i=0;i<this.state.dynamic.length;i++){\n//             if((this.state.dynamic[i].question=='' && this.state.dynamic[i].answer=='' && this.state.dynamic[i].remark==''))\n//             {\n//                this.setState({nullValue:false})\n//               this.setState({\n//                   redirect: true\n//                 })\n            \n//             }\n//             else if((this.state.dynamic[i].question==''|| this.state.dynamic[i].answer==''  ))\n//             {\n//              this.setState({nullValue:true})\n//               break;\n//             }\n          \n      \n//           if(this.state.nullValue==true){\n//             alert(\"Fields can't be empty\")\n//           }\n          \n//           else{\n//             let id = this.props.match.params.id\n//           let month = this.props.match.params.month\n//           let year =\"2019\"\n//           console.log(this.state.dynamic, 'state');\n//           fetch(apiconstants.URL + `feedback/${id}/${month}/${year}`, {\n//             method: 'PATCH',\n//             headers: {\n//               'Content-Type': 'application/json'\n//             },\n//             body: JSON.stringify(this.state.dynamic)\n      \n//           }).then(res=> res)\n//           .then(res => {\n//             console.log(res.status)\n            \n//             })\n//             // this.setState({\n//             //   redirect: true\n//             // })\n      \n//             //    if (this.state.redirect) {\n//             //     return <Redirect to={\"/goals\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month) + \"/\" + (this.props.match.params.emp) + \"/\" + (this.props.match.params.pro)} />;\n        \n//             //   }\n         \n//           }\n          \n//         };\n\n     \n        \n\n       \n//     };\n\n//     async componentDidMount() {\n//         console.log(\"Component Did mount started\")\n//         let val=await this.time();\n//         console.log(\"value is \"+val)\n//         if(val===1){\n//             console.log(\"it entered the if \"+val)\n//             await setTimeout(()=>{this.setState({disabled:true})},);\n//         }\n        \n//     }\n\n//     time = async () => {\n//         console.log(\"state is:\"+JSON.stringify(this.state));\n\n//         var id = this.props.match.params.id\n//         var month = this.props.match.params.month\n\n//         const response =await axios({\n            \n//             method: 'get',\n//             url: apiconstants.URL + `/employeetimestamp/${id}/${month}`,\n//             // data: this.state\n//         })\n//             console.log(month)\n//             return await response.data.time;\n//     }\n\n\n//     setRedirect1 = (event) => {\n//         event.preventDefault();\n//        console.log(this.state)\n//         this.setState({\n//             redirect1: true\n//         })\n        \n//     };\n\n\n     \n  \n    \n//     validate() {\n//         const { q1 } = this.state;\n//         const { a1 } = this.state;\n//         const { q2 } = this.state;\n//         const { a2 } = this.state;\n//         const { q3 } = this.state;\n//         const { a3 } = this.state;\n//         const { q4 } = this.state;\n//         const { a4 } = this.state;\n//         const { q5 } = this.state;\n//         const { a5 } = this.state;\n\n//         let formIsValid = true;\n//         if (q1 == '' || a1 == '' || q2 == '' || a2 == '' || q3 == '' || a3 == '' || q4 == '' || a4 == '' || q5 == '' || a5 == '') {\n//             alert('Please fill the field');\n//             formIsValid = false;\n//         }\n//         else\n//             return formIsValid;\n//     }\n//     render() {\n//         // const {q1}=' How is everything going today? Tell me about this last week?',\n//         // var {q2}=' What has gone well/not so well for you in this month?',\n//         // var {q3}=' What challenges have you faced?',\n//         // var {q4}=' How are you/your team progressing towards established goals?',\n//         // var {q5}= ' What are you committing to between now and the next time we meet?',\n\n\n//         const pathURL=this.state.locationPath;\n\n\n       \n//         {\n//             var id = this.props.match.params.id\n//             var month = this.props.match.params.month\n//             if (this.state.redirect) {\n//                 return <Redirect to={\"/dynamic-form\"+\"/\"+  (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month)+\"/\"+(this.props.match.params.emp) +\"/\"+(this.props.match.params.pro)} />;\n\n//             }\n//         }\n\n//         {\n//             var id = this.props.match.params.id\n//             var month = this.props.match.params.month\n//             if (this.state.redirect1) {\n//                 return <Redirect to={\"/month\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) +\n//                  \"/\" + (this.props.match.params.emp)+\"/\"+ (this.props.match.params.pro)} />;\n\n//             }\n//         }\n//         var mid = this.props.match.params.mid;\n//         return (\n//             <div className=\"manbg\">\n//                 <Header mid={mid} />\n\n//                <Tab mid={this.props.match.params.mid}  \n//                     id={this.props.match.params.id}  \n//                     month={this.props.match.params.month}  \n//                     emp={this.props.match.params.emp} \n//                     pro={this.props.match.params.pro}  \n//                     pathURL={pathURL}\n//                      />\n\n//                 <Label size='large' style={{color:\"black\",width :\"auto\"}} ><Icon name='user' />\n       \n//        {this.props.match.params.pro}\n//        </Label> \n//                <h1 style={{color:\"#303030\",paddingLeft:\"40px\"}}>Employee Feedback-1 : <span style={{color:\"darkblue\",fontWeight:\"bolder\"}}>{this.props.match.params.emp}</span> </h1>\n//                 <br />\n//                 <br />\n\n//                 <br />\n//                 <br />\n//                 <br />\n//                 <br />\n\n//                                {/* <button onClick={this.setRedirect}\n//                     style={{ \"width\": \"200px\",float:\"right\" }}\n//                     className=\"ui positive button\">Save & Next <Icon name=\"arrow circle right\" /> </button> */}\n                \n\n\n//                 <Form >      \n//             {this.state.dynamic.map((row, i) => (\n//               <div style={{ paddingLeft: \"10%\" }} className=\"form1\">  \n//                 <TextArea style={{ color: \"black\", height: \"60px\" }}\n//                   placeholder=\"Enter your question\"\n//                   value={row.question}\n//                   disabled={this.state.disabled}\n//                   onChange={this.handleQuesChange(i)}\n//                required >{row.question}</TextArea>\n//                 <br />\n  \n//                 <TextArea style={{ color: \"black\" }}\n//                   placeholder='Enter answer here'\n//                   value={row.answer}\n//                   disabled={this.state.disabled}\n//                   style={{ backgroundColor: bgColors.Yellow }}\n//                   onChange={this.handleAnsChange(i)}\n//                   required >{row.answer}</TextArea>\n//                 <br />\n  \n//                 <TextArea style={{ color: \"black\", height: \"60px\" }}\n//                   placeholder='Remarks. If any?'\n//                   style={{ backgroundColor: bgColors.Green }}\n//                   value={row.remark}\n//                   disabled={this.state.disabled}\n//                   onChange={this.handleRemarkChange(i)}\n//                   required  >{row.remark}</TextArea>\n//               </div>\n//             ))}\n          \n           \n//    <button onClick={this.setRedirect1}\n//                             style={{ width :\"auto\",}}\n//                             className=\"ui blue button\"> <Icon name=\"arrow circle left\" />Go Back</button>\n\n//             <Button\n//               type=\"button\"\n//               onClick={this.handleAdd}\n//               className=\"ui blue button\"\n//               style={{ width: \"auto\" }} > Add more questions </Button>\n  \n//             <Button onClick={this.handleSubmit} style={{ width: \"auto\" }} className=\"ui green button\" >   Save <Icon name=\"arrow circle right\" /></Button>\n//           </Form> \n   \n       \n//           <Footer/>\n//         </div>\n\n//         )\n//     }\n\n// }\n\n\n\n\n\n\n\nimport axios from \"axios\";\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Button, Form, Icon, Label, TextArea, TabPane,Divider } from 'semantic-ui-react';\nimport Footer from \"../Components/Footer\";\nimport Header from \"../Components/Header\";\nimport MonthYearPicker from 'react-month-year-picker';\nimport apiconstants from '../employee/config';\nimport \"../Managerpg1/Managermain.css\";\nimport Tab from \"../Components/Tab\"\nimport Year from \"../Components/YearMonthPicker\"\n// import Year from \"../Components/YearPick\"\nimport Month from \"../Components/MonthYear/Month\"\n\nvar bgColors = {\n  \"Default\": \"#81b71a\",\n  \"Blue\": \"#00B1E1\",\n  \"Cyan\": \"#\",\n  \"Green\": \"#98FB98\",\n  \"Red\": \"#E9573F\",\n  \"Yellow\": \"#d3d3d3\",\n};\n\nclass Managerpage3 extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      dynamic: [],\n      disabled: false,\n      nullValue: false\n    };\n  }\n\n  componentWillMount() {\n    let id = this.props.match.params.id\n    let month = this.props.match.params.month\n    let year= \"2019 \"\n    const response = axios({\n      method: 'post',\n      url: apiconstants.URL + `prepopulate/${id}/${5}/${2019}`,\n    })\n    \n      .then(response => {\n        console.log(response)\n        \n        this.setState({ dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month }) });\n\n        // if (response.data.length != 0) {\n        //   const da = [];\n        //   console.log(JSON.stringify(response.data))\n        //   response.data.map((datas) => {\n        //     if (datas.type === 'd') {\n        //       da.push(datas);\n        //     }\n        //   })\n        //   this.setState({ dynamic: da })\n        // }\n\n        // else {\n        //   this.setState({ dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month }) });\n\n        // }\n      })\n\n  }\n  async componentDidMount() {\n    console.log(\"Component Did mount started\")\n    let val = await this.time();\n    console.log(\"value is \" + val)\n    if (val === 1) {\n      console.log(\"it entered the if \" + val)\n      await setTimeout(() => { this.setState({ disabled: true }) });\n    }\n\n  }\n  time = async () => {\n    console.log(\"state is:\" + JSON.stringify(this.state));\n\n    var id = this.props.match.params.id\n    var month = this.props.match.params.month\n\n    const response = await axios({\n\n      method: 'get',\n      url: apiconstants.URL + `/employeetimestamp/${id}/${month}`,\n    })\n    console.log(response.data.time)\n    return await response.data.time;\n  }\n\n  handleQuesChange = i => evt => {\n    const newques = this.state.dynamic.map((row, j) => {\n      if (i !== j) return row;\n      console.log('row', row)\n      return { ...row, question: evt.target.value };\n    });\n\n    this.setState({ dynamic: newques });\n  };\n  handleAnsChange = i => evt => {\n    const newanswer = this.state.dynamic.map((row, j) => {\n      if (i !== j) return row;\n      return { ...row, answer: evt.target.value };\n    });\n\n    this.setState({ dynamic: newanswer });\n  };\n  handleRemarkChange = i => evt => {\n    const newr = this.state.dynamic.map((row, j) => {\n      if (i !== j) return row;\n      return { ...row, remark: evt.target.value };\n    });\n\n    this.setState({ dynamic: newr });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    // this.setState({\n    //   redirect: true\n    // })\n    console.log(JSON.stringify(this.state.dynamic));\n    for(let i=0;i<this.state.dynamic.length;i++){\n      if((this.state.dynamic[i].question=='' && this.state.dynamic[i].answer=='' && this.state.dynamic[i].remark==''))\n      {\n        await this.setState({nullValue:false})\n        // this.setState({\n        //     redirect: true\n        //   })\n      \n      }\n      else if((this.state.dynamic[i].question==''|| this.state.dynamic[i].answer==''  ))\n      {\n        await this.setState({nullValue:true})\n        break;\n      }\n    \n\n    if(this.state.nullValue==true){\n      alert(\"Fields can't be empty\")\n      \n    }\n    else{\n      let id = this.props.match.params.id\n    let month = this.props.match.params.month\n    console.log(this.state.dynamic, 'state');\n    fetch(apiconstants.URL + `qanda_dynamic/${id}/${month}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state.dynamic)\n\n    }).then(res=> res)\n    .then(res => {\n      console.log(res.status)\n      \n      })\n      this.setState({\n        redirect: true\n      })\n\n        //  if (this.state.redirect) {\n        //   return <Redirect to={\"/goals\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month) + \"/\" + (this.props.match.params.emp) + \"/\" + (this.props.match.params.pro)} />;\n  \n        // }\n   \n    }\n    \n  };\n  }\n\n  handleAdd = () => {\n    this.setState({\n      dynamic: this.state.dynamic.concat({ id: this.props.match.params.id, question: \"\", answer: \"\", remark: \"\", month: this.props.match.params.month })\n    });\n  };\n\n  setRedirect1 = (event) => {\n    event.preventDefault();\n    console.log(this.state)\n    this.setState({\n      redirect1: true\n    })\n  };\n\n  render() {\n    // {\n    //   if (this.state.redirect) {\n    //     return <Redirect to={\"/goals\" + \"/\" + (this.props.match.params.mid) + \"/\" + (this.props.match.params.id) + \"/\" + (this.props.match.params.month) + \"/\" + (this.props.match.params.emp) + \"/\" + (this.props.match.params.pro)} />;\n\n    //   }\n    // }\n    {\n      var id = this.props.match.params.id\n      var month = this.props.match.params.month\n      if (this.state.redirect1) {\n          return <Redirect to={\"/manager\" + \"/\" + (this.props.match.params.mid) } />;\n\n      }\n  }\n    var mid = this.props.match.params.mid;\n    return (\n      <div className=\"manbg\">\n        <Header mid={mid} />\n        <Tab mid={this.props.match.params.mid}  \n                    id={this.props.match.params.id}  \n                    month={this.props.match.params.month}  \n                    emp={this.props.match.params.emp} \n                    pro={this.props.match.params.pro}  \n                    // pathURL={pathURL}\n                     />\n                     <div className=\"ui calender\"></div>\n        <Label size='large' style={{ color: \"black\", width: \"auto\" }} ><Icon name='user' />\n\n          {this.props.match.params.pro}\n        </Label >\n        <Year/>\n\n        {/* <Month/> */}\n        <br />\n        <br />\n        <br />\n\n        <h1 style={{ color: \" #303030\" }}>Employee Feedback-2 :<span style={{color:\"darkblue\",fontWeight:\"bolder\"}}>{this.props.match.params.emp}</span> </h1>\n        <br />\n             <Form >\n          {this.state.dynamic.map((row, i) => (\n            <div style={{ paddingLeft: \"10%\" }} className=\"form1\">\n\n              <TextArea style={{ color: \"black\", height: \"60px\" }}\n                placeholder=\"Enter your question\"\n                value={row.question}\n                disabled={this.state.disabled}\n                onChange={this.handleQuesChange(i)}\n             required >{row.question}</TextArea>\n              <br />\n\n              <TextArea style={{ color: \"black\" }}\n                placeholder='Enter answer here'\n                value={row.answer}\n                disabled={this.state.disabled}\n                style={{ backgroundColor: bgColors.Yellow }}\n                onChange={this.handleAnsChange(i)}\n                required >{row.answer}</TextArea>\n              <br />\n\n              <TextArea style={{ color: \"black\", height: \"60px\" }}\n                placeholder='Remarks. If any?'\n                style={{ backgroundColor: bgColors.Green }}\n                value={row.remark}\n                disabled={this.state.disabled}\n                onChange={this.handleRemarkChange(i)}\n                required  >{row.remark}</TextArea>\n            </div>\n          ))}\n          <br />\n          <br />\n          <br />\n\n          <button onClick={this.setRedirect1}\n                            style={{ width :\"auto\",}}\n                            className=\"ui blue button\"> <Icon name=\"arrow circle left\" />Go Back</button>\n\n          <Button\n            type=\"button\"\n            onClick={this.handleAdd}\n            className=\"ui blue button\"\n            style={{ width: \"auto\" }} > Add more questions </Button>\n          <Button onClick={this.handleSubmit} style={{ width: \"auto\" }} className=\"ui green button\" >   Save <Icon name=\"arrow circle right\" /></Button>\n        </Form>\n        <br /><br /><br /><br /><br /><br /><br />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Managerpage3;  \n\n"]},"metadata":{},"sourceType":"module"}